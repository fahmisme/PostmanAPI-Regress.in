{
  "collection": {
    "_": {
      "postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769"
    },
    "item": [
      {
        "id": "81eb9f99-e464-4e67-9547-d9aade46c833",
        "name": "SELECT /users/3",
        "request": {
          "url": {
            "path": [
              "api",
              "users",
              "3"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "95fa2d62-a149-473d-bdee-32334c598d93",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200\", () => {\r",
                "  pm.response.to.have.status(200);\r",
                "});\r",
                "pm.test(\"Content-Type header is application/json\", () => {\r",
                "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                "});\r",
                "pm.test(\"Connection is keep-alive\", () => {\r",
                "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                "});\r",
                "pm.test(\"Person is Jane\", () => {\r",
                "  const responseJson = pm.response.json();\r",
                "  pm.expect(responseJson.data.first_name).to.eql(\"Emma\");\r",
                "  pm.expect(responseJson.data.last_name).to.eql('Wong');\r",
                "  pm.expect(responseJson.data.id).to.eql(3);\r",
                "  pm.expect(responseJson.data.email).to.eql(\"emma.wong@reqres.in\");\r",
                "});"
              ],
              "_lastExecutionId": "e7814e03-adad-41ad-8b82-ec6b63175a44"
            }
          }
        ]
      },
      {
        "id": "dbf4198b-6477-4560-9500-43261fb4d7eb",
        "name": "REGISTER Successful",
        "request": {
          "url": {
            "path": [
              "api",
              "register"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ff99a4ef-574d-42e7-9b7e-33bdc0710fce",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200\", () => {\r",
                "  pm.response.to.have.status(200);\r",
                "});\r",
                "pm.test(\"Status code name OK\", () => {\r",
                "  pm.response.to.have.status(\"OK\");\r",
                "});\r",
                "pm.test(\"Content-Type header is application/json\", () => {\r",
                "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                "});\r",
                "pm.test(\"Connection is keep-alive\", () => {\r",
                "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                "});\r",
                "if (pm.response.json().id) {\r",
                "  console.log(\"id was found!\");\r",
                "  // do something\r",
                "} else {\r",
                "  console.log(\"no id ...\");\r",
                "  //do something else\r",
                "}\r",
                "pm.test(\"Body contains string\",() => {\r",
                "  pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
                "});\r",
                "pm.test(\"Response property matches environment variable\", function () {\r",
                "  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
                "});"
              ],
              "_lastExecutionId": "0e1555d6-2ed6-4f4d-8c75-e6ba8f556d2c"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "85324ff3-360c-46a0-9c64-0fce0db1150a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10051062-54f8-4777-9ecb-4dab576247f8"
            }
          }
        ]
      },
      {
        "id": "0fe3ce5a-f6f5-4916-bf6e-be0201e95566",
        "name": "UPDATE /users/2",
        "request": {
          "url": {
            "path": [
              "api",
              "users",
              "2"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "ace8f19d-f873-4d19-b1a9-fa7ec524252f",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200\", () => {\r",
                "  pm.response.to.have.status(200);\r",
                "});\r",
                "pm.test(\"Status code name OK\", () => {\r",
                "  pm.response.to.have.status(\"OK\");\r",
                "});\r",
                "pm.test(\"Content-Type header is application/json\", () => {\r",
                "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                "});\r",
                "pm.test(\"Connection is keep-alive\", () => {\r",
                "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                "});\r",
                "pm.test(\"Body contains string\",() => {\r",
                "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                "});"
              ],
              "_lastExecutionId": "7ddded58-c1c8-4406-b16a-c4dc14a41a2d"
            }
          }
        ]
      },
      {
        "id": "0bc2f0ac-52b6-455b-9063-bc72b8322974",
        "name": "UPDATE /users/3",
        "request": {
          "url": {
            "path": [
              "api",
              "users",
              "3"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "PUT",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "name",
                "value": "{{prefixName}} {{fullName}}"
              },
              {
                "key": "job",
                "value": "{{jobName}}"
              }
            ],
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "8b4db5a0-c3e4-441c-849f-7619190a1f01",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200\", () => {\r",
                "  pm.response.to.have.status(200);\r",
                "});\r",
                "pm.test(\"Status code name OK\", () => {\r",
                "  pm.response.to.have.status(\"OK\");\r",
                "});\r",
                "pm.test(\"Connection is keep-alive\", () => {\r",
                "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                "});\r",
                "pm.test(\"Content-Type header is application/json\", () => {\r",
                "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                "});\r",
                "pm.test(\"Body contains string\",() => {\r",
                "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                "});"
              ],
              "_lastExecutionId": "59e344d0-59c2-41b6-ba92-89021599afff"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "0171d2f9-92fe-4843-bfff-ade207493dd8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7ce48dcb-2295-41c9-a686-49ab0cbcceb1"
            }
          }
        ]
      },
      {
        "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
        "name": "DELETE /users/2",
        "request": {
          "url": {
            "path": [
              "api",
              "users",
              "2"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 204\", () => {\r",
                "  pm.response.to.have.status(204);\r",
                "});\r",
                "pm.test(\"Status code name OK\", () => {\r",
                "  pm.response.to.have.status(\"OK\");\r",
                "});\r",
                "pm.test(\"Status code name No Content\", () => {\r",
                "  pm.response.to.have.status(\"No Content\");\r",
                "});\r",
                "pm.test(\"Content-Type header is application/json\", () => {\r",
                "  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
                "});\r",
                "pm.test(\"Connection is keep-alive\", () => {\r",
                "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                "});"
              ],
              "_lastExecutionId": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
            }
          }
        ]
      },
      {
        "id": "91327509-6b41-44c4-81ff-8a2a5ccc82a4",
        "name": "GET SINGLE DATA /unknown/2",
        "request": {
          "url": {
            "path": [
              "api",
              "unknown",
              "2"
            ],
            "host": [
              "{{url}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d62ad7c5-bae7-4af9-8330-b336a7da8102",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 200\", () => {\r",
                "  pm.response.to.have.status(200);\r",
                "});\r",
                "pm.test(\"Status code name OK\", () => {\r",
                "  pm.response.to.have.status(\"OK\");\r",
                "});\r",
                "pm.test(\"Content-Type header is application/json\", () => {\r",
                "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                "});\r",
                "pm.test(\"Connection is keep-alive\", () => {\r",
                "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                "});\r",
                "pm.test(\"Data of Fuchsia Rose\", () => {\r",
                "  const responseJson = pm.response.json();\r",
                "  pm.expect(responseJson.data.name).to.eql(\"fuchsia rose\");\r",
                "  pm.expect(responseJson.data.year).to.eql(2001);\r",
                "  pm.expect(responseJson.data.color).to.eql('#C74375');\r",
                "  pm.expect(responseJson.data.pantone_value).to.eql(\"17-2031\");\r",
                "});"
              ],
              "_lastExecutionId": "3166c766-aa5d-4626-a77a-43a64a9f6736"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "a39a09dd-7991-4136-8f94-79477ece02c3",
          "type": "text/javascript",
          "exec": [
            "postman.setEnvironmentVariable('fullName',pm.variables.replaceIn('{{$randomFullName}}'))",
            "postman.setEnvironmentVariable('prefixName',pm.variables.replaceIn('{{$randomNamePrefix}}'))",
            "postman.setEnvironmentVariable('jobName',pm.variables.replaceIn('{{$randomJobType}}'))",
            ""
          ],
          "_lastExecutionId": "70b5986f-6651-48cb-9bef-41753cfd41e0"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
          "type": "text/javascript",
          "exec": [
            "pm.test(\"Response time is less than 200ms\", () => {",
            "  pm.expect(pm.response.responseTime).to.be.below(200);",
            "});",
            "pm.test(\"Server is Cloudflare\", () => {",
            "  pm.expect(pm.response.headers.get('Server')).to.eql('cloudflare');",
            "});",
            "pm.test(\"X-Powered By Express\", () => {",
            "  pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('Express');});"
          ],
          "_lastExecutionId": "ee86a61a-15fa-4202-92cf-964f90f0bec2"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "https://reqres.in",
        "key": "url"
      }
    ],
    "info": {
      "_postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769",
      "name": "Tugas API Dasar",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "c7a18e10-7e18-4bf4-b89f-bf1e70d255db",
    "values": [
      {
        "type": "any",
        "value": "Santiago Morissette",
        "key": "fullName"
      },
      {
        "type": "any",
        "value": "Dr.",
        "key": "prefixName"
      },
      {
        "type": "any",
        "value": "Administrator",
        "key": "jobName"
      }
    ]
  },
  "globals": {
    "id": "46d58d9d-7291-4a74-886e-9aafcc075101",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 20,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 48,
        "pending": 0,
        "failed": 6
      },
      "testScripts": {
        "total": 12,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 8,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 394.8333333333333,
      "responseMin": 46,
      "responseMax": 777,
      "responseSd": 211.53204380319204,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1659581974544,
      "completed": 1659581977674
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ba4c0598-9692-473a-92ca-77417bcc3fe7",
          "httpRequestId": "894a5f71-963e-4dbd-9afe-6207805d4132"
        },
        "item": {
          "id": "81eb9f99-e464-4e67-9547-d9aade46c833",
          "name": "SELECT /users/3",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "3"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95fa2d62-a149-473d-bdee-32334c598d93",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});\r",
                  "pm.test(\"Person is Jane\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.data.first_name).to.eql(\"Emma\");\r",
                  "  pm.expect(responseJson.data.last_name).to.eql('Wong');\r",
                  "  pm.expect(responseJson.data.id).to.eql(3);\r",
                  "  pm.expect(responseJson.data.email).to.eql(\"emma.wong@reqres.in\");\r",
                  "});"
                ],
                "_lastExecutionId": "e7814e03-adad-41ad-8b82-ec6b63175a44"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "3"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "07f72ef0-8a4d-464e-a844-25b56feccc17",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "610fca92-e41f-4f3d-9ce8-c7c9106bb947",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 04 Aug 2022 02:59:35 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"112-EeInfgHWtnxhYRnwgZUB667e024\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=14400"
            },
            {
              "key": "CF-Cache-Status",
              "value": "EXPIRED"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=yO4eIze5R5a0CTYMLDnoTzUP0Q8jbxXddlx7DPIDygRe43OTDy7JcBP%2FwMcqtHdLvzcqhGaB27frSMkXRJvZtN%2F0QMMi1Hn3CmCFPPSajwPvhAYJfqOeuUiwZw%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "735409adc8199f73-SIN"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              101,
              109,
              109,
              97,
              46,
              119,
              111,
              110,
              103,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              109,
              109,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              87,
              111,
              110,
              103,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              51,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              35,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              45,
              104,
              101,
              97,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              84,
              111,
              32,
              107,
              101,
              101,
              112,
              32,
              82,
              101,
              113,
              82,
              101,
              115,
              32,
              102,
              114,
              101,
              101,
              44,
              32,
              99,
              111,
              110,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              115,
              32,
              116,
              111,
              119,
              97,
              114,
              100,
              115,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              99,
              111,
              115,
              116,
              115,
              32,
              97,
              114,
              101,
              32,
              97,
              112,
              112,
              114,
              101,
              99,
              105,
              97,
              116,
              101,
              100,
              33,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 777,
          "responseSize": 274
        },
        "id": "81eb9f99-e464-4e67-9547-d9aade46c833",
        "assertions": [
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 200ms",
              "message": "expected 777 to be below 200",
              "stack": "AssertionError: expected 777 to be below 200\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Server is Cloudflare",
            "skipped": false
          },
          {
            "assertion": "X-Powered By Express",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          },
          {
            "assertion": "Connection is keep-alive",
            "skipped": false
          },
          {
            "assertion": "Person is Jane",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "39a29e26-a3ca-46d9-abc9-7929a4a5bf5c",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4f1897d7-57a3-4fdd-94b5-8b549503d8bd"
        },
        "item": {
          "id": "dbf4198b-6477-4560-9500-43261fb4d7eb",
          "name": "REGISTER Successful",
          "request": {
            "url": {
              "path": [
                "api",
                "register"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff99a4ef-574d-42e7-9b7e-33bdc0710fce",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name OK\", () => {\r",
                  "  pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});\r",
                  "if (pm.response.json().id) {\r",
                  "  console.log(\"id was found!\");\r",
                  "  // do something\r",
                  "} else {\r",
                  "  console.log(\"no id ...\");\r",
                  "  //do something else\r",
                  "}\r",
                  "pm.test(\"Body contains string\",() => {\r",
                  "  pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
                  "});\r",
                  "pm.test(\"Response property matches environment variable\", function () {\r",
                  "  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
                  "});"
                ],
                "_lastExecutionId": "0e1555d6-2ed6-4f4d-8c75-e6ba8f556d2c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "85324ff3-360c-46a0-9c64-0fce0db1150a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "10051062-54f8-4777-9ecb-4dab576247f8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "register"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cb83717f-4023-444b-b8ea-a9525eab0dee",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "66",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "3dfa5268-0c85-45f1-a047-9320123fad4e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 04 Aug 2022 02:59:35 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "36"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"24-4iP0za1geN2he+ohu8F0FhCjLks\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=Fs7iFLN3E4Os7UNoHOYE%2FDctsp71n9e87vUgEWAgwQ0iTbLz3zUgNZpYs8UQVfl%2BrP1ftHGukIaJZ0UWJfOEfruMv0S0dmJ3%2FvKaqri%2FajV5fvLemlZpW%2F0Efg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "735409b16ca49f73-SIN"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              81,
              112,
              119,
              76,
              53,
              116,
              107,
              101,
              52,
              80,
              110,
              112,
              106,
              97,
              55,
              88,
              52,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 385,
          "responseSize": 36
        },
        "id": "dbf4198b-6477-4560-9500-43261fb4d7eb",
        "assertions": [
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 200ms",
              "message": "expected 385 to be below 200",
              "stack": "AssertionError: expected 385 to be below 200\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Server is Cloudflare",
            "skipped": false
          },
          {
            "assertion": "X-Powered By Express",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Status code name OK",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          },
          {
            "assertion": "Connection is keep-alive",
            "skipped": false
          },
          {
            "assertion": "Body contains string",
            "skipped": false
          },
          {
            "assertion": "Response property matches environment variable",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fc0549d1-af2f-47e6-8408-5c807e48902d",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "146e7251-9bb1-4130-9bcc-2a17906047f9"
        },
        "item": {
          "id": "0fe3ce5a-f6f5-4916-bf6e-be0201e95566",
          "name": "UPDATE /users/2",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "2"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ace8f19d-f873-4d19-b1a9-fa7ec524252f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name OK\", () => {\r",
                  "  pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});\r",
                  "pm.test(\"Body contains string\",() => {\r",
                  "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                  "});"
                ],
                "_lastExecutionId": "7ddded58-c1c8-4406-b16a-c4dc14a41a2d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "2"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8b50d9c7-0145-4bc8-b1f1-969173c268b9",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "57",
              "system": true
            }
          ],
          "method": "PATCH",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d75abd47-4aa6-430b-825f-213421f3a61a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 04 Aug 2022 02:59:36 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"50-RVBcVHgMjaxYi4gKrgFCCQyQ8to\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=d%2F0x%2F%2BdGYfM%2FmDl0wvpi7zrEyIaJHHdrKMPjOUb7KidH2yAjKK57keNLTnYIgjOLtiMzcjedB9Be7ZDq5etLLl2mY9s7QLAjrtKEr%2FEWN9Ss4IF279DLTZad%2Bg%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "735409b4a8e29f73-SIN"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              109,
              111,
              114,
              112,
              104,
              101,
              117,
              115,
              34,
              44,
              34,
              106,
              111,
              98,
              34,
              58,
              34,
              122,
              105,
              111,
              110,
              32,
              114,
              101,
              115,
              105,
              100,
              101,
              110,
              116,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              48,
              50,
              58,
              53,
              57,
              58,
              51,
              54,
              46,
              48,
              53,
              48,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 382,
          "responseSize": 80
        },
        "id": "0fe3ce5a-f6f5-4916-bf6e-be0201e95566",
        "assertions": [
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 200ms",
              "message": "expected 382 to be below 200",
              "stack": "AssertionError: expected 382 to be below 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Server is Cloudflare",
            "skipped": false
          },
          {
            "assertion": "X-Powered By Express",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Status code name OK",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          },
          {
            "assertion": "Connection is keep-alive",
            "skipped": false
          },
          {
            "assertion": "Body contains string",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d5575db7-a7ac-486b-ba3e-d4f56befac48",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "874bf065-ea52-4cba-82cb-6e46b4018a5f"
        },
        "item": {
          "id": "0bc2f0ac-52b6-455b-9063-bc72b8322974",
          "name": "UPDATE /users/3",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "3"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "name",
                  "value": "{{prefixName}} {{fullName}}"
                },
                {
                  "key": "job",
                  "value": "{{jobName}}"
                }
              ],
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8b4db5a0-c3e4-441c-849f-7619190a1f01",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name OK\", () => {\r",
                  "  pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                  "});\r",
                  "pm.test(\"Body contains string\",() => {\r",
                  "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                  "});"
                ],
                "_lastExecutionId": "59e344d0-59c2-41b6-ba92-89021599afff"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0171d2f9-92fe-4843-bfff-ade207493dd8",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7ce48dcb-2295-41c9-a686-49ab0cbcceb1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "3"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9a350d97-1894-44b1-b873-1d3322cbf717",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "35",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "name",
                "value": "Ms. Lola Kessler"
              },
              {
                "key": "job",
                "value": "Agent"
              }
            ],
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "7166d473-3c67-4779-9849-e68404dfd5e6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 04 Aug 2022 02:59:36 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"50-7SFD487MV27FJu+e2hrHRkaIS7c\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=agPpwvJGJJ4MnhMMoUKvJTkDBRV%2BTUpDmolvchYd7uXo%2BJx7WGLt7kNpgUV%2FO9B36MW%2Bilkm1g1VTPloZf0k%2BZuvXgCyLExXpgP058tjXCNz7wQLunDjkWlNGA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "735409b7ad6b9f73-SIN"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              115,
              46,
              32,
              76,
              111,
              108,
              97,
              32,
              75,
              101,
              115,
              115,
              108,
              101,
              114,
              34,
              44,
              34,
              106,
              111,
              98,
              34,
              58,
              34,
              65,
              103,
              101,
              110,
              116,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              50,
              45,
              48,
              56,
              45,
              48,
              52,
              84,
              48,
              50,
              58,
              53,
              57,
              58,
              51,
              54,
              46,
              53,
              50,
              53,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 375,
          "responseSize": 80
        },
        "id": "0bc2f0ac-52b6-455b-9063-bc72b8322974",
        "assertions": [
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 200ms",
              "message": "expected 375 to be below 200",
              "stack": "AssertionError: expected 375 to be below 200\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Server is Cloudflare",
            "skipped": false
          },
          {
            "assertion": "X-Powered By Express",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Status code name OK",
            "skipped": false
          },
          {
            "assertion": "Connection is keep-alive",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          },
          {
            "assertion": "Body contains string",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "10db82c2-1682-45e6-b396-1d54b2a1bd52",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "020a7ded-3174-41ac-ae37-43179eb78967"
        },
        "item": {
          "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
          "name": "DELETE /users/2",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "2"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", () => {\r",
                  "  pm.response.to.have.status(204);\r",
                  "});\r",
                  "pm.test(\"Status code name OK\", () => {\r",
                  "  pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"Status code name No Content\", () => {\r",
                  "  pm.response.to.have.status(\"No Content\");\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});"
                ],
                "_lastExecutionId": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users",
              "2"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d8dfa949-6b37-4027-8d2e-10d2ca74bc6e",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "48096edb-3d13-486f-aff4-ef84370234b0",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 04 Aug 2022 02:59:37 GMT"
            },
            {
              "key": "Content-Length",
              "value": "0"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "CF-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=mBOhGr2fEe3%2Fb6DIlAtVf6RxnjN9ua%2B7bdtszzmCz1%2F%2Bt%2F%2BH0jX0zT7q4aaKXHhhmHbPwbX0DnUQf5FcwDZ1bNKB2tTVYMvNPWYwExPGU1yRtYI9bmbEj233CA%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "735409bac9fe9f73-SIN"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 404,
          "responseSize": 0
        },
        "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
        "assertions": [
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response time is less than 200ms",
              "message": "expected 404 to be below 200",
              "stack": "AssertionError: expected 404 to be below 200\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Server is Cloudflare",
            "skipped": false
          },
          {
            "assertion": "X-Powered By Express",
            "skipped": false
          },
          {
            "assertion": "Status code is 204",
            "skipped": false
          },
          {
            "assertion": "Status code name OK",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code name OK",
              "message": "expected response to have status reason 'OK' but got 'No Content'",
              "stack": "AssertionError: expected response to have status reason 'OK' but got 'No Content'\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Status code name No Content",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          },
          {
            "assertion": "Connection is keep-alive",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "54df2deb-a714-421f-8fe9-bfa57e9a1861",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "46c741b1-b56e-4fbb-ae93-67e8008613fa"
        },
        "item": {
          "id": "91327509-6b41-44c4-81ff-8a2a5ccc82a4",
          "name": "GET SINGLE DATA /unknown/2",
          "request": {
            "url": {
              "path": [
                "api",
                "unknown",
                "2"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d62ad7c5-bae7-4af9-8330-b336a7da8102",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name OK\", () => {\r",
                  "  pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});\r",
                  "pm.test(\"Data of Fuchsia Rose\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.data.name).to.eql(\"fuchsia rose\");\r",
                  "  pm.expect(responseJson.data.year).to.eql(2001);\r",
                  "  pm.expect(responseJson.data.color).to.eql('#C74375');\r",
                  "  pm.expect(responseJson.data.pantone_value).to.eql(\"17-2031\");\r",
                  "});"
                ],
                "_lastExecutionId": "3166c766-aa5d-4626-a77a-43a64a9f6736"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "unknown",
              "2"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.29.0",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fbf38936-da4b-497c-b438-650fe541c498",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "23ad6b0b-7056-45c3-b57c-7c34326e4933",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 04 Aug 2022 02:59:37 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Etag",
              "value": "W/\"e8-ov4wWh4/OY1IMQMqWgskYtOFnVs\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=14400"
            },
            {
              "key": "CF-Cache-Status",
              "value": "HIT"
            },
            {
              "key": "Age",
              "value": "5580"
            },
            {
              "key": "Expect-CT",
              "value": "max-age=604800, report-uri=\"https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct\""
            },
            {
              "key": "Report-To",
              "value": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=hmnit8E6EKLXW%2BURRF8CEQU0W%2B%2F4h8SsYa%2BmQMd3%2Bnt5mW2kwC1%2BtIIlnEyxcPdw9JihxW5dEQm2gbLjxyABZhuzAp%2BiUcEAepX6RBm16P5lWfzt%2BpXq9g4c9w%3D%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "NEL",
              "value": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}"
            },
            {
              "key": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "735409bdfe2e9f73-SIN"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              102,
              117,
              99,
              104,
              115,
              105,
              97,
              32,
              114,
              111,
              115,
              101,
              34,
              44,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              48,
              49,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              67,
              55,
              52,
              51,
              55,
              53,
              34,
              44,
              34,
              112,
              97,
              110,
              116,
              111,
              110,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              55,
              45,
              50,
              48,
              51,
              49,
              34,
              125,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              35,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              45,
              104,
              101,
              97,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              84,
              111,
              32,
              107,
              101,
              101,
              112,
              32,
              82,
              101,
              113,
              82,
              101,
              115,
              32,
              102,
              114,
              101,
              101,
              44,
              32,
              99,
              111,
              110,
              116,
              114,
              105,
              98,
              117,
              116,
              105,
              111,
              110,
              115,
              32,
              116,
              111,
              119,
              97,
              114,
              100,
              115,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              99,
              111,
              115,
              116,
              115,
              32,
              97,
              114,
              101,
              32,
              97,
              112,
              112,
              114,
              101,
              99,
              105,
              97,
              116,
              101,
              100,
              33,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 46,
          "responseSize": 232
        },
        "id": "91327509-6b41-44c4-81ff-8a2a5ccc82a4",
        "assertions": [
          {
            "assertion": "Response time is less than 200ms",
            "skipped": false
          },
          {
            "assertion": "Server is Cloudflare",
            "skipped": false
          },
          {
            "assertion": "X-Powered By Express",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Status code name OK",
            "skipped": false
          },
          {
            "assertion": "Content-Type header is application/json",
            "skipped": false
          },
          {
            "assertion": "Connection is keep-alive",
            "skipped": false
          },
          {
            "assertion": "Data of Fuchsia Rose",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 702
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 200ms",
          "message": "expected 777 to be below 200",
          "stack": "AssertionError: expected 777 to be below 200\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "ebe14d71e0e6aa70f20622a079efacfe",
          "id": "40ca2e0c-cd9b-4ce2-b984-9f3a236b11c5",
          "timestamp": 1659581975453,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "81eb9f99-e464-4e67-9547-d9aade46c833",
          "name": "SELECT /users/3",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "3"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95fa2d62-a149-473d-bdee-32334c598d93",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});\r",
                  "pm.test(\"Person is Jane\", () => {\r",
                  "  const responseJson = pm.response.json();\r",
                  "  pm.expect(responseJson.data.first_name).to.eql(\"Emma\");\r",
                  "  pm.expect(responseJson.data.last_name).to.eql('Wong');\r",
                  "  pm.expect(responseJson.data.id).to.eql(3);\r",
                  "  pm.expect(responseJson.data.email).to.eql(\"emma.wong@reqres.in\");\r",
                  "});"
                ],
                "_lastExecutionId": "e7814e03-adad-41ad-8b82-ec6b63175a44"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769"
          },
          "item": [
            {
              "id": "81eb9f99-e464-4e67-9547-d9aade46c833",
              "name": "SELECT /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95fa2d62-a149-473d-bdee-32334c598d93",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Person is Jane\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.first_name).to.eql(\"Emma\");\r",
                      "  pm.expect(responseJson.data.last_name).to.eql('Wong');\r",
                      "  pm.expect(responseJson.data.id).to.eql(3);\r",
                      "  pm.expect(responseJson.data.email).to.eql(\"emma.wong@reqres.in\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e7814e03-adad-41ad-8b82-ec6b63175a44"
                  }
                }
              ]
            },
            {
              "id": "dbf4198b-6477-4560-9500-43261fb4d7eb",
              "name": "REGISTER Successful",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff99a4ef-574d-42e7-9b7e-33bdc0710fce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "if (pm.response.json().id) {\r",
                      "  console.log(\"id was found!\");\r",
                      "  // do something\r",
                      "} else {\r",
                      "  console.log(\"no id ...\");\r",
                      "  //do something else\r",
                      "}\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
                      "});\r",
                      "pm.test(\"Response property matches environment variable\", function () {\r",
                      "  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
                      "});"
                    ],
                    "_lastExecutionId": "0e1555d6-2ed6-4f4d-8c75-e6ba8f556d2c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "85324ff3-360c-46a0-9c64-0fce0db1150a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10051062-54f8-4777-9ecb-4dab576247f8"
                  }
                }
              ]
            },
            {
              "id": "0fe3ce5a-f6f5-4916-bf6e-be0201e95566",
              "name": "UPDATE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ace8f19d-f873-4d19-b1a9-fa7ec524252f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7ddded58-c1c8-4406-b16a-c4dc14a41a2d"
                  }
                }
              ]
            },
            {
              "id": "0bc2f0ac-52b6-455b-9063-bc72b8322974",
              "name": "UPDATE /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "name",
                      "value": "{{prefixName}} {{fullName}}"
                    },
                    {
                      "key": "job",
                      "value": "{{jobName}}"
                    }
                  ],
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8b4db5a0-c3e4-441c-849f-7619190a1f01",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "59e344d0-59c2-41b6-ba92-89021599afff"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0171d2f9-92fe-4843-bfff-ade207493dd8",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7ce48dcb-2295-41c9-a686-49ab0cbcceb1"
                  }
                }
              ]
            },
            {
              "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
              "name": "DELETE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", () => {\r",
                      "  pm.response.to.have.status(204);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Status code name No Content\", () => {\r",
                      "  pm.response.to.have.status(\"No Content\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});"
                    ],
                    "_lastExecutionId": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
                  }
                }
              ]
            },
            {
              "id": "91327509-6b41-44c4-81ff-8a2a5ccc82a4",
              "name": "GET SINGLE DATA /unknown/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "unknown",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d62ad7c5-bae7-4af9-8330-b336a7da8102",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Data of Fuchsia Rose\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.name).to.eql(\"fuchsia rose\");\r",
                      "  pm.expect(responseJson.data.year).to.eql(2001);\r",
                      "  pm.expect(responseJson.data.color).to.eql('#C74375');\r",
                      "  pm.expect(responseJson.data.pantone_value).to.eql(\"17-2031\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3166c766-aa5d-4626-a77a-43a64a9f6736"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a39a09dd-7991-4136-8f94-79477ece02c3",
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable('fullName',pm.variables.replaceIn('{{$randomFullName}}'))",
                  "postman.setEnvironmentVariable('prefixName',pm.variables.replaceIn('{{$randomNamePrefix}}'))",
                  "postman.setEnvironmentVariable('jobName',pm.variables.replaceIn('{{$randomJobType}}'))",
                  ""
                ],
                "_lastExecutionId": "70b5986f-6651-48cb-9bef-41753cfd41e0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response time is less than 200ms\", () => {",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "pm.test(\"Server is Cloudflare\", () => {",
                  "  pm.expect(pm.response.headers.get('Server')).to.eql('cloudflare');",
                  "});",
                  "pm.test(\"X-Powered By Express\", () => {",
                  "  pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('Express');});"
                ],
                "_lastExecutionId": "ee86a61a-15fa-4202-92cf-964f90f0bec2"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "https://reqres.in",
              "key": "url"
            }
          ],
          "info": {
            "_postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769",
            "name": "Tugas API Dasar",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ba4c0598-9692-473a-92ca-77417bcc3fe7",
          "httpRequestId": "894a5f71-963e-4dbd-9afe-6207805d4132",
          "scriptId": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
          "execution": "b5c4a54a-502c-4976-98bc-54462d8f19db"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 200ms",
          "message": "expected 385 to be below 200",
          "stack": "AssertionError: expected 385 to be below 200\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "d056fae15478ef8b230910d093f5f86d",
          "id": "22e1fd71-c4ac-4d17-9a36-17c02bfc4427",
          "timestamp": 1659581975964,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dbf4198b-6477-4560-9500-43261fb4d7eb",
          "name": "REGISTER Successful",
          "request": {
            "url": {
              "path": [
                "api",
                "register"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ff99a4ef-574d-42e7-9b7e-33bdc0710fce",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name OK\", () => {\r",
                  "  pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});\r",
                  "if (pm.response.json().id) {\r",
                  "  console.log(\"id was found!\");\r",
                  "  // do something\r",
                  "} else {\r",
                  "  console.log(\"no id ...\");\r",
                  "  //do something else\r",
                  "}\r",
                  "pm.test(\"Body contains string\",() => {\r",
                  "  pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
                  "});\r",
                  "pm.test(\"Response property matches environment variable\", function () {\r",
                  "  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
                  "});"
                ],
                "_lastExecutionId": "0e1555d6-2ed6-4f4d-8c75-e6ba8f556d2c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "85324ff3-360c-46a0-9c64-0fce0db1150a",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "10051062-54f8-4777-9ecb-4dab576247f8"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769"
          },
          "item": [
            {
              "id": "81eb9f99-e464-4e67-9547-d9aade46c833",
              "name": "SELECT /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95fa2d62-a149-473d-bdee-32334c598d93",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Person is Jane\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.first_name).to.eql(\"Emma\");\r",
                      "  pm.expect(responseJson.data.last_name).to.eql('Wong');\r",
                      "  pm.expect(responseJson.data.id).to.eql(3);\r",
                      "  pm.expect(responseJson.data.email).to.eql(\"emma.wong@reqres.in\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e7814e03-adad-41ad-8b82-ec6b63175a44"
                  }
                }
              ]
            },
            {
              "id": "dbf4198b-6477-4560-9500-43261fb4d7eb",
              "name": "REGISTER Successful",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff99a4ef-574d-42e7-9b7e-33bdc0710fce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "if (pm.response.json().id) {\r",
                      "  console.log(\"id was found!\");\r",
                      "  // do something\r",
                      "} else {\r",
                      "  console.log(\"no id ...\");\r",
                      "  //do something else\r",
                      "}\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
                      "});\r",
                      "pm.test(\"Response property matches environment variable\", function () {\r",
                      "  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
                      "});"
                    ],
                    "_lastExecutionId": "0e1555d6-2ed6-4f4d-8c75-e6ba8f556d2c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "85324ff3-360c-46a0-9c64-0fce0db1150a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10051062-54f8-4777-9ecb-4dab576247f8"
                  }
                }
              ]
            },
            {
              "id": "0fe3ce5a-f6f5-4916-bf6e-be0201e95566",
              "name": "UPDATE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ace8f19d-f873-4d19-b1a9-fa7ec524252f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7ddded58-c1c8-4406-b16a-c4dc14a41a2d"
                  }
                }
              ]
            },
            {
              "id": "0bc2f0ac-52b6-455b-9063-bc72b8322974",
              "name": "UPDATE /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "name",
                      "value": "{{prefixName}} {{fullName}}"
                    },
                    {
                      "key": "job",
                      "value": "{{jobName}}"
                    }
                  ],
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8b4db5a0-c3e4-441c-849f-7619190a1f01",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "59e344d0-59c2-41b6-ba92-89021599afff"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0171d2f9-92fe-4843-bfff-ade207493dd8",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7ce48dcb-2295-41c9-a686-49ab0cbcceb1"
                  }
                }
              ]
            },
            {
              "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
              "name": "DELETE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", () => {\r",
                      "  pm.response.to.have.status(204);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Status code name No Content\", () => {\r",
                      "  pm.response.to.have.status(\"No Content\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});"
                    ],
                    "_lastExecutionId": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
                  }
                }
              ]
            },
            {
              "id": "91327509-6b41-44c4-81ff-8a2a5ccc82a4",
              "name": "GET SINGLE DATA /unknown/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "unknown",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d62ad7c5-bae7-4af9-8330-b336a7da8102",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Data of Fuchsia Rose\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.name).to.eql(\"fuchsia rose\");\r",
                      "  pm.expect(responseJson.data.year).to.eql(2001);\r",
                      "  pm.expect(responseJson.data.color).to.eql('#C74375');\r",
                      "  pm.expect(responseJson.data.pantone_value).to.eql(\"17-2031\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3166c766-aa5d-4626-a77a-43a64a9f6736"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a39a09dd-7991-4136-8f94-79477ece02c3",
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable('fullName',pm.variables.replaceIn('{{$randomFullName}}'))",
                  "postman.setEnvironmentVariable('prefixName',pm.variables.replaceIn('{{$randomNamePrefix}}'))",
                  "postman.setEnvironmentVariable('jobName',pm.variables.replaceIn('{{$randomJobType}}'))",
                  ""
                ],
                "_lastExecutionId": "70b5986f-6651-48cb-9bef-41753cfd41e0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response time is less than 200ms\", () => {",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "pm.test(\"Server is Cloudflare\", () => {",
                  "  pm.expect(pm.response.headers.get('Server')).to.eql('cloudflare');",
                  "});",
                  "pm.test(\"X-Powered By Express\", () => {",
                  "  pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('Express');});"
                ],
                "_lastExecutionId": "ee86a61a-15fa-4202-92cf-964f90f0bec2"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "https://reqres.in",
              "key": "url"
            }
          ],
          "info": {
            "_postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769",
            "name": "Tugas API Dasar",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "39a29e26-a3ca-46d9-abc9-7929a4a5bf5c",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4f1897d7-57a3-4fdd-94b5-8b549503d8bd",
          "scriptId": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
          "execution": "272704aa-8e58-4d86-ae90-6a58d97353a3"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 200ms",
          "message": "expected 382 to be below 200",
          "stack": "AssertionError: expected 382 to be below 200\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "aec53137673639f695cd5437ab807366",
          "id": "179b4c3b-4e86-4629-8114-f5cf29c356db",
          "timestamp": 1659581976480,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0fe3ce5a-f6f5-4916-bf6e-be0201e95566",
          "name": "UPDATE /users/2",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "2"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PATCH",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ace8f19d-f873-4d19-b1a9-fa7ec524252f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name OK\", () => {\r",
                  "  pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});\r",
                  "pm.test(\"Body contains string\",() => {\r",
                  "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                  "});"
                ],
                "_lastExecutionId": "7ddded58-c1c8-4406-b16a-c4dc14a41a2d"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769"
          },
          "item": [
            {
              "id": "81eb9f99-e464-4e67-9547-d9aade46c833",
              "name": "SELECT /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95fa2d62-a149-473d-bdee-32334c598d93",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Person is Jane\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.first_name).to.eql(\"Emma\");\r",
                      "  pm.expect(responseJson.data.last_name).to.eql('Wong');\r",
                      "  pm.expect(responseJson.data.id).to.eql(3);\r",
                      "  pm.expect(responseJson.data.email).to.eql(\"emma.wong@reqres.in\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e7814e03-adad-41ad-8b82-ec6b63175a44"
                  }
                }
              ]
            },
            {
              "id": "dbf4198b-6477-4560-9500-43261fb4d7eb",
              "name": "REGISTER Successful",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff99a4ef-574d-42e7-9b7e-33bdc0710fce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "if (pm.response.json().id) {\r",
                      "  console.log(\"id was found!\");\r",
                      "  // do something\r",
                      "} else {\r",
                      "  console.log(\"no id ...\");\r",
                      "  //do something else\r",
                      "}\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
                      "});\r",
                      "pm.test(\"Response property matches environment variable\", function () {\r",
                      "  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
                      "});"
                    ],
                    "_lastExecutionId": "0e1555d6-2ed6-4f4d-8c75-e6ba8f556d2c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "85324ff3-360c-46a0-9c64-0fce0db1150a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10051062-54f8-4777-9ecb-4dab576247f8"
                  }
                }
              ]
            },
            {
              "id": "0fe3ce5a-f6f5-4916-bf6e-be0201e95566",
              "name": "UPDATE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ace8f19d-f873-4d19-b1a9-fa7ec524252f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7ddded58-c1c8-4406-b16a-c4dc14a41a2d"
                  }
                }
              ]
            },
            {
              "id": "0bc2f0ac-52b6-455b-9063-bc72b8322974",
              "name": "UPDATE /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "name",
                      "value": "{{prefixName}} {{fullName}}"
                    },
                    {
                      "key": "job",
                      "value": "{{jobName}}"
                    }
                  ],
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8b4db5a0-c3e4-441c-849f-7619190a1f01",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "59e344d0-59c2-41b6-ba92-89021599afff"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0171d2f9-92fe-4843-bfff-ade207493dd8",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7ce48dcb-2295-41c9-a686-49ab0cbcceb1"
                  }
                }
              ]
            },
            {
              "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
              "name": "DELETE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", () => {\r",
                      "  pm.response.to.have.status(204);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Status code name No Content\", () => {\r",
                      "  pm.response.to.have.status(\"No Content\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});"
                    ],
                    "_lastExecutionId": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
                  }
                }
              ]
            },
            {
              "id": "91327509-6b41-44c4-81ff-8a2a5ccc82a4",
              "name": "GET SINGLE DATA /unknown/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "unknown",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d62ad7c5-bae7-4af9-8330-b336a7da8102",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Data of Fuchsia Rose\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.name).to.eql(\"fuchsia rose\");\r",
                      "  pm.expect(responseJson.data.year).to.eql(2001);\r",
                      "  pm.expect(responseJson.data.color).to.eql('#C74375');\r",
                      "  pm.expect(responseJson.data.pantone_value).to.eql(\"17-2031\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3166c766-aa5d-4626-a77a-43a64a9f6736"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a39a09dd-7991-4136-8f94-79477ece02c3",
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable('fullName',pm.variables.replaceIn('{{$randomFullName}}'))",
                  "postman.setEnvironmentVariable('prefixName',pm.variables.replaceIn('{{$randomNamePrefix}}'))",
                  "postman.setEnvironmentVariable('jobName',pm.variables.replaceIn('{{$randomJobType}}'))",
                  ""
                ],
                "_lastExecutionId": "70b5986f-6651-48cb-9bef-41753cfd41e0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response time is less than 200ms\", () => {",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "pm.test(\"Server is Cloudflare\", () => {",
                  "  pm.expect(pm.response.headers.get('Server')).to.eql('cloudflare');",
                  "});",
                  "pm.test(\"X-Powered By Express\", () => {",
                  "  pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('Express');});"
                ],
                "_lastExecutionId": "ee86a61a-15fa-4202-92cf-964f90f0bec2"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "https://reqres.in",
              "key": "url"
            }
          ],
          "info": {
            "_postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769",
            "name": "Tugas API Dasar",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "fc0549d1-af2f-47e6-8408-5c807e48902d",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "146e7251-9bb1-4130-9bcc-2a17906047f9",
          "scriptId": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
          "execution": "1c210710-dfd2-4151-8c78-8ed9b7fb4a8b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 200ms",
          "message": "expected 375 to be below 200",
          "stack": "AssertionError: expected 375 to be below 200\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "fce1e1e5fe7fd0a3ca1901cf75e568c3",
          "id": "9d804604-7a12-45ad-b7e6-8ac0bccca155",
          "timestamp": 1659581976964,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0bc2f0ac-52b6-455b-9063-bc72b8322974",
          "name": "UPDATE /users/3",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "3"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "name",
                  "value": "{{prefixName}} {{fullName}}"
                },
                {
                  "key": "job",
                  "value": "{{jobName}}"
                }
              ],
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8b4db5a0-c3e4-441c-849f-7619190a1f01",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", () => {\r",
                  "  pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Status code name OK\", () => {\r",
                  "  pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                  "});\r",
                  "pm.test(\"Body contains string\",() => {\r",
                  "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                  "});"
                ],
                "_lastExecutionId": "59e344d0-59c2-41b6-ba92-89021599afff"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0171d2f9-92fe-4843-bfff-ade207493dd8",
                "type": "text/javascript",
                "exec": [
                  ""
                ],
                "_lastExecutionId": "7ce48dcb-2295-41c9-a686-49ab0cbcceb1"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769"
          },
          "item": [
            {
              "id": "81eb9f99-e464-4e67-9547-d9aade46c833",
              "name": "SELECT /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95fa2d62-a149-473d-bdee-32334c598d93",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Person is Jane\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.first_name).to.eql(\"Emma\");\r",
                      "  pm.expect(responseJson.data.last_name).to.eql('Wong');\r",
                      "  pm.expect(responseJson.data.id).to.eql(3);\r",
                      "  pm.expect(responseJson.data.email).to.eql(\"emma.wong@reqres.in\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e7814e03-adad-41ad-8b82-ec6b63175a44"
                  }
                }
              ]
            },
            {
              "id": "dbf4198b-6477-4560-9500-43261fb4d7eb",
              "name": "REGISTER Successful",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff99a4ef-574d-42e7-9b7e-33bdc0710fce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "if (pm.response.json().id) {\r",
                      "  console.log(\"id was found!\");\r",
                      "  // do something\r",
                      "} else {\r",
                      "  console.log(\"no id ...\");\r",
                      "  //do something else\r",
                      "}\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
                      "});\r",
                      "pm.test(\"Response property matches environment variable\", function () {\r",
                      "  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
                      "});"
                    ],
                    "_lastExecutionId": "0e1555d6-2ed6-4f4d-8c75-e6ba8f556d2c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "85324ff3-360c-46a0-9c64-0fce0db1150a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10051062-54f8-4777-9ecb-4dab576247f8"
                  }
                }
              ]
            },
            {
              "id": "0fe3ce5a-f6f5-4916-bf6e-be0201e95566",
              "name": "UPDATE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ace8f19d-f873-4d19-b1a9-fa7ec524252f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7ddded58-c1c8-4406-b16a-c4dc14a41a2d"
                  }
                }
              ]
            },
            {
              "id": "0bc2f0ac-52b6-455b-9063-bc72b8322974",
              "name": "UPDATE /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "name",
                      "value": "{{prefixName}} {{fullName}}"
                    },
                    {
                      "key": "job",
                      "value": "{{jobName}}"
                    }
                  ],
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8b4db5a0-c3e4-441c-849f-7619190a1f01",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "59e344d0-59c2-41b6-ba92-89021599afff"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0171d2f9-92fe-4843-bfff-ade207493dd8",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7ce48dcb-2295-41c9-a686-49ab0cbcceb1"
                  }
                }
              ]
            },
            {
              "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
              "name": "DELETE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", () => {\r",
                      "  pm.response.to.have.status(204);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Status code name No Content\", () => {\r",
                      "  pm.response.to.have.status(\"No Content\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});"
                    ],
                    "_lastExecutionId": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
                  }
                }
              ]
            },
            {
              "id": "91327509-6b41-44c4-81ff-8a2a5ccc82a4",
              "name": "GET SINGLE DATA /unknown/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "unknown",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d62ad7c5-bae7-4af9-8330-b336a7da8102",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Data of Fuchsia Rose\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.name).to.eql(\"fuchsia rose\");\r",
                      "  pm.expect(responseJson.data.year).to.eql(2001);\r",
                      "  pm.expect(responseJson.data.color).to.eql('#C74375');\r",
                      "  pm.expect(responseJson.data.pantone_value).to.eql(\"17-2031\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3166c766-aa5d-4626-a77a-43a64a9f6736"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a39a09dd-7991-4136-8f94-79477ece02c3",
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable('fullName',pm.variables.replaceIn('{{$randomFullName}}'))",
                  "postman.setEnvironmentVariable('prefixName',pm.variables.replaceIn('{{$randomNamePrefix}}'))",
                  "postman.setEnvironmentVariable('jobName',pm.variables.replaceIn('{{$randomJobType}}'))",
                  ""
                ],
                "_lastExecutionId": "70b5986f-6651-48cb-9bef-41753cfd41e0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response time is less than 200ms\", () => {",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "pm.test(\"Server is Cloudflare\", () => {",
                  "  pm.expect(pm.response.headers.get('Server')).to.eql('cloudflare');",
                  "});",
                  "pm.test(\"X-Powered By Express\", () => {",
                  "  pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('Express');});"
                ],
                "_lastExecutionId": "ee86a61a-15fa-4202-92cf-964f90f0bec2"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "https://reqres.in",
              "key": "url"
            }
          ],
          "info": {
            "_postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769",
            "name": "Tugas API Dasar",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "d5575db7-a7ac-486b-ba3e-d4f56befac48",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "874bf065-ea52-4cba-82cb-6e46b4018a5f",
          "scriptId": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
          "execution": "7c073cd8-372b-4189-bd76-c418f97c4907"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response time is less than 200ms",
          "message": "expected 404 to be below 200",
          "stack": "AssertionError: expected 404 to be below 200\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "78db3d7ed43ca5fe3c3b420dfac3661c",
          "id": "d3baa7df-b56c-44ae-b76c-01b1e93b0360",
          "timestamp": 1659581977480,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
          "name": "DELETE /users/2",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "2"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", () => {\r",
                  "  pm.response.to.have.status(204);\r",
                  "});\r",
                  "pm.test(\"Status code name OK\", () => {\r",
                  "  pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"Status code name No Content\", () => {\r",
                  "  pm.response.to.have.status(\"No Content\");\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});"
                ],
                "_lastExecutionId": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769"
          },
          "item": [
            {
              "id": "81eb9f99-e464-4e67-9547-d9aade46c833",
              "name": "SELECT /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95fa2d62-a149-473d-bdee-32334c598d93",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Person is Jane\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.first_name).to.eql(\"Emma\");\r",
                      "  pm.expect(responseJson.data.last_name).to.eql('Wong');\r",
                      "  pm.expect(responseJson.data.id).to.eql(3);\r",
                      "  pm.expect(responseJson.data.email).to.eql(\"emma.wong@reqres.in\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e7814e03-adad-41ad-8b82-ec6b63175a44"
                  }
                }
              ]
            },
            {
              "id": "dbf4198b-6477-4560-9500-43261fb4d7eb",
              "name": "REGISTER Successful",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff99a4ef-574d-42e7-9b7e-33bdc0710fce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "if (pm.response.json().id) {\r",
                      "  console.log(\"id was found!\");\r",
                      "  // do something\r",
                      "} else {\r",
                      "  console.log(\"no id ...\");\r",
                      "  //do something else\r",
                      "}\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
                      "});\r",
                      "pm.test(\"Response property matches environment variable\", function () {\r",
                      "  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
                      "});"
                    ],
                    "_lastExecutionId": "0e1555d6-2ed6-4f4d-8c75-e6ba8f556d2c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "85324ff3-360c-46a0-9c64-0fce0db1150a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10051062-54f8-4777-9ecb-4dab576247f8"
                  }
                }
              ]
            },
            {
              "id": "0fe3ce5a-f6f5-4916-bf6e-be0201e95566",
              "name": "UPDATE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ace8f19d-f873-4d19-b1a9-fa7ec524252f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7ddded58-c1c8-4406-b16a-c4dc14a41a2d"
                  }
                }
              ]
            },
            {
              "id": "0bc2f0ac-52b6-455b-9063-bc72b8322974",
              "name": "UPDATE /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "name",
                      "value": "{{prefixName}} {{fullName}}"
                    },
                    {
                      "key": "job",
                      "value": "{{jobName}}"
                    }
                  ],
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8b4db5a0-c3e4-441c-849f-7619190a1f01",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "59e344d0-59c2-41b6-ba92-89021599afff"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0171d2f9-92fe-4843-bfff-ade207493dd8",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7ce48dcb-2295-41c9-a686-49ab0cbcceb1"
                  }
                }
              ]
            },
            {
              "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
              "name": "DELETE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", () => {\r",
                      "  pm.response.to.have.status(204);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Status code name No Content\", () => {\r",
                      "  pm.response.to.have.status(\"No Content\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});"
                    ],
                    "_lastExecutionId": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
                  }
                }
              ]
            },
            {
              "id": "91327509-6b41-44c4-81ff-8a2a5ccc82a4",
              "name": "GET SINGLE DATA /unknown/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "unknown",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d62ad7c5-bae7-4af9-8330-b336a7da8102",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Data of Fuchsia Rose\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.name).to.eql(\"fuchsia rose\");\r",
                      "  pm.expect(responseJson.data.year).to.eql(2001);\r",
                      "  pm.expect(responseJson.data.color).to.eql('#C74375');\r",
                      "  pm.expect(responseJson.data.pantone_value).to.eql(\"17-2031\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3166c766-aa5d-4626-a77a-43a64a9f6736"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a39a09dd-7991-4136-8f94-79477ece02c3",
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable('fullName',pm.variables.replaceIn('{{$randomFullName}}'))",
                  "postman.setEnvironmentVariable('prefixName',pm.variables.replaceIn('{{$randomNamePrefix}}'))",
                  "postman.setEnvironmentVariable('jobName',pm.variables.replaceIn('{{$randomJobType}}'))",
                  ""
                ],
                "_lastExecutionId": "70b5986f-6651-48cb-9bef-41753cfd41e0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response time is less than 200ms\", () => {",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "pm.test(\"Server is Cloudflare\", () => {",
                  "  pm.expect(pm.response.headers.get('Server')).to.eql('cloudflare');",
                  "});",
                  "pm.test(\"X-Powered By Express\", () => {",
                  "  pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('Express');});"
                ],
                "_lastExecutionId": "ee86a61a-15fa-4202-92cf-964f90f0bec2"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "https://reqres.in",
              "key": "url"
            }
          ],
          "info": {
            "_postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769",
            "name": "Tugas API Dasar",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "10db82c2-1682-45e6-b396-1d54b2a1bd52",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "020a7ded-3174-41ac-ae37-43179eb78967",
          "scriptId": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
          "execution": "6c64fdca-ab11-4f08-8d89-bb022e6a7050"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status code name OK",
          "message": "expected response to have status reason 'OK' but got 'No Content'",
          "stack": "AssertionError: expected response to have status reason 'OK' but got 'No Content'\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "a71d28453697482fd60a4ce6033b99dc",
          "id": "b2eedb49-d9ce-462f-be59-ba47463b0eb7",
          "timestamp": 1659581977498,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
          "name": "DELETE /users/2",
          "request": {
            "url": {
              "path": [
                "api",
                "users",
                "2"
              ],
              "host": [
                "{{url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 204\", () => {\r",
                  "  pm.response.to.have.status(204);\r",
                  "});\r",
                  "pm.test(\"Status code name OK\", () => {\r",
                  "  pm.response.to.have.status(\"OK\");\r",
                  "});\r",
                  "pm.test(\"Status code name No Content\", () => {\r",
                  "  pm.response.to.have.status(\"No Content\");\r",
                  "});\r",
                  "pm.test(\"Content-Type header is application/json\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
                  "});\r",
                  "pm.test(\"Connection is keep-alive\", () => {\r",
                  "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                  "});"
                ],
                "_lastExecutionId": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769"
          },
          "item": [
            {
              "id": "81eb9f99-e464-4e67-9547-d9aade46c833",
              "name": "SELECT /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95fa2d62-a149-473d-bdee-32334c598d93",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Person is Jane\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.first_name).to.eql(\"Emma\");\r",
                      "  pm.expect(responseJson.data.last_name).to.eql('Wong');\r",
                      "  pm.expect(responseJson.data.id).to.eql(3);\r",
                      "  pm.expect(responseJson.data.email).to.eql(\"emma.wong@reqres.in\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "e7814e03-adad-41ad-8b82-ec6b63175a44"
                  }
                }
              ]
            },
            {
              "id": "dbf4198b-6477-4560-9500-43261fb4d7eb",
              "name": "REGISTER Successful",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "register"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ff99a4ef-574d-42e7-9b7e-33bdc0710fce",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "if (pm.response.json().id) {\r",
                      "  console.log(\"id was found!\");\r",
                      "  // do something\r",
                      "} else {\r",
                      "  console.log(\"no id ...\");\r",
                      "  //do something else\r",
                      "}\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
                      "});\r",
                      "pm.test(\"Response property matches environment variable\", function () {\r",
                      "  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
                      "});"
                    ],
                    "_lastExecutionId": "0e1555d6-2ed6-4f4d-8c75-e6ba8f556d2c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "85324ff3-360c-46a0-9c64-0fce0db1150a",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "10051062-54f8-4777-9ecb-4dab576247f8"
                  }
                }
              ]
            },
            {
              "id": "0fe3ce5a-f6f5-4916-bf6e-be0201e95566",
              "name": "UPDATE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ace8f19d-f873-4d19-b1a9-fa7ec524252f",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "7ddded58-c1c8-4406-b16a-c4dc14a41a2d"
                  }
                }
              ]
            },
            {
              "id": "0bc2f0ac-52b6-455b-9063-bc72b8322974",
              "name": "UPDATE /users/3",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "3"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "name",
                      "value": "{{prefixName}} {{fullName}}"
                    },
                    {
                      "key": "job",
                      "value": "{{jobName}}"
                    }
                  ],
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8b4db5a0-c3e4-441c-849f-7619190a1f01",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Body contains string\",() => {\r",
                      "  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "59e344d0-59c2-41b6-ba92-89021599afff"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0171d2f9-92fe-4843-bfff-ade207493dd8",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "7ce48dcb-2295-41c9-a686-49ab0cbcceb1"
                  }
                }
              ]
            },
            {
              "id": "dec6bc99-07e7-4efd-b104-35891967c50d",
              "name": "DELETE /users/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "users",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 204\", () => {\r",
                      "  pm.response.to.have.status(204);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Status code name No Content\", () => {\r",
                      "  pm.response.to.have.status(\"No Content\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});"
                    ],
                    "_lastExecutionId": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
                  }
                }
              ]
            },
            {
              "id": "91327509-6b41-44c4-81ff-8a2a5ccc82a4",
              "name": "GET SINGLE DATA /unknown/2",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "unknown",
                    "2"
                  ],
                  "host": [
                    "{{url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d62ad7c5-bae7-4af9-8330-b336a7da8102",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", () => {\r",
                      "  pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"Status code name OK\", () => {\r",
                      "  pm.response.to.have.status(\"OK\");\r",
                      "});\r",
                      "pm.test(\"Content-Type header is application/json\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
                      "});\r",
                      "pm.test(\"Connection is keep-alive\", () => {\r",
                      "  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
                      "});\r",
                      "pm.test(\"Data of Fuchsia Rose\", () => {\r",
                      "  const responseJson = pm.response.json();\r",
                      "  pm.expect(responseJson.data.name).to.eql(\"fuchsia rose\");\r",
                      "  pm.expect(responseJson.data.year).to.eql(2001);\r",
                      "  pm.expect(responseJson.data.color).to.eql('#C74375');\r",
                      "  pm.expect(responseJson.data.pantone_value).to.eql(\"17-2031\");\r",
                      "});"
                    ],
                    "_lastExecutionId": "3166c766-aa5d-4626-a77a-43a64a9f6736"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a39a09dd-7991-4136-8f94-79477ece02c3",
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable('fullName',pm.variables.replaceIn('{{$randomFullName}}'))",
                  "postman.setEnvironmentVariable('prefixName',pm.variables.replaceIn('{{$randomNamePrefix}}'))",
                  "postman.setEnvironmentVariable('jobName',pm.variables.replaceIn('{{$randomJobType}}'))",
                  ""
                ],
                "_lastExecutionId": "70b5986f-6651-48cb-9bef-41753cfd41e0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6a00682e-6244-4b8a-8cd2-4a05629dfa6f",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Response time is less than 200ms\", () => {",
                  "  pm.expect(pm.response.responseTime).to.be.below(200);",
                  "});",
                  "pm.test(\"Server is Cloudflare\", () => {",
                  "  pm.expect(pm.response.headers.get('Server')).to.eql('cloudflare');",
                  "});",
                  "pm.test(\"X-Powered By Express\", () => {",
                  "  pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('Express');});"
                ],
                "_lastExecutionId": "ee86a61a-15fa-4202-92cf-964f90f0bec2"
              }
            }
          ],
          "variable": [
            {
              "type": "any",
              "value": "https://reqres.in",
              "key": "url"
            }
          ],
          "info": {
            "_postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769",
            "name": "Tugas API Dasar",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "10db82c2-1682-45e6-b396-1d54b2a1bd52",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "020a7ded-3174-41ac-ae37-43179eb78967",
          "scriptId": "518cd577-8e03-4e72-b7d5-d5be3db5b2ad",
          "execution": "23f19659-6d45-4912-84ab-09d8ec4d57d4"
        }
      }
    ],
    "error": null
  }
}