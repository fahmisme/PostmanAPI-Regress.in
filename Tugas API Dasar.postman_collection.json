{
	"info": {
		"_postman_id": "c7ae51b7-a37b-455c-9b77-a074b7165769",
		"name": "Tugas API Dasar",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SELECT /users/3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"Connection is keep-alive\", () => {\r",
							"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
							"});\r",
							"pm.test(\"Person is Jane\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.data.first_name).to.eql(\"Emma\");\r",
							"  pm.expect(responseJson.data.last_name).to.eql('Wong');\r",
							"  pm.expect(responseJson.data.id).to.eql(3);\r",
							"  pm.expect(responseJson.data.email).to.eql(\"emma.wong@reqres.in\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users/3",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "REGISTER Successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name OK\", () => {\r",
							"  pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"Connection is keep-alive\", () => {\r",
							"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
							"});\r",
							"if (pm.response.json().id) {\r",
							"  console.log(\"id was found!\");\r",
							"  // do something\r",
							"} else {\r",
							"  console.log(\"no id ...\");\r",
							"  //do something else\r",
							"}\r",
							"pm.test(\"Body contains string\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"id\",\"token\");\r",
							"});\r",
							"pm.test(\"Response property matches environment variable\", function () {\r",
							"  pm.expect(pm.response.json().name).to.eql(pm.environment.get(\"name\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/register",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE /users/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name OK\", () => {\r",
							"  pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"Connection is keep-alive\", () => {\r",
							"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
							"});\r",
							"pm.test(\"Body contains string\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE /users/3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name OK\", () => {\r",
							"  pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Connection is keep-alive\", () => {\r",
							"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"Body contains string\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"name\",\"job\",\"updatedAt\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "{{prefixName}} {{fullName}}",
							"type": "default"
						},
						{
							"key": "job",
							"value": "{{jobName}}",
							"type": "default"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/users/3",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /users/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", () => {\r",
							"  pm.response.to.have.status(204);\r",
							"});\r",
							"pm.test(\"Status code name OK\", () => {\r",
							"  pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Status code name No Content\", () => {\r",
							"  pm.response.to.have.status(\"No Content\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql(undefined);\r",
							"});\r",
							"pm.test(\"Connection is keep-alive\", () => {\r",
							"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/api/users/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET SINGLE DATA /unknown/2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status code name OK\", () => {\r",
							"  pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"});\r",
							"pm.test(\"Connection is keep-alive\", () => {\r",
							"  pm.expect(pm.response.headers.get('Connection')).to.eql('keep-alive');\r",
							"});\r",
							"pm.test(\"Data of Fuchsia Rose\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.data.name).to.eql(\"fuchsia rose\");\r",
							"  pm.expect(responseJson.data.year).to.eql(2001);\r",
							"  pm.expect(responseJson.data.color).to.eql('#C74375');\r",
							"  pm.expect(responseJson.data.pantone_value).to.eql(\"17-2031\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/unknown/2",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"unknown",
						"2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"postman.setEnvironmentVariable('fullName',pm.variables.replaceIn('{{$randomFullName}}'))",
					"postman.setEnvironmentVariable('prefixName',pm.variables.replaceIn('{{$randomNamePrefix}}'))",
					"postman.setEnvironmentVariable('jobName',pm.variables.replaceIn('{{$randomJobType}}'))",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response time is less than 200ms\", () => {",
					"  pm.expect(pm.response.responseTime).to.be.below(200);",
					"});",
					"pm.test(\"Server is Cloudflare\", () => {",
					"  pm.expect(pm.response.headers.get('Server')).to.eql('cloudflare');",
					"});",
					"pm.test(\"X-Powered By Express\", () => {",
					"  pm.expect(pm.response.headers.get('X-Powered-By')).to.eql('Express');});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://reqres.in",
			"type": "default"
		}
	]
}